import aiohttp
import json
from typing import List, Dict, Any
import os
import asyncio
import re

class VulnerabilityDatabase:
    def __init__(self):
        self.nvd_api_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        self.vulnerability_cache = {}
        self.owasp_patterns = self._load_owasp_patterns()
        self.cwe_patterns = self._load_cwe_patterns()

    def _load_owasp_patterns(self) -> Dict[str, Any]:
        # Common OWASP Top 10 patterns
        return {
            'injection': {
                'patterns': [r'SELECT.*FROM', r'INSERT.*INTO', r'exec\('],
                'severity': 'high'
            },
            'xss': {
                'patterns': [r'<script>', r'innerHTML', r'document\.write'],
                'severity': 'high'
            },
            'broken_auth': {
                'patterns': [r'password.*=', r'auth.*token'],
                'severity': 'high'
            }
        }

    def _load_cwe_patterns(self) -> Dict[str, Any]:
        # Common CWE patterns
        return {
            'CWE-79': {'name': 'XSS', 'patterns': [r'<script>', r'eval\(']},
            'CWE-89': {'name': 'SQL Injection', 'patterns': [r'SELECT.*FROM']},
            'CWE-200': {'name': 'Info Exposure', 'patterns': [r'password', r'secret']}
        }

    async def check_content(self, content: str) -> List[Dict[str, Any]]:
        findings = []
        # Check both OWASP and CWE patterns
        for vuln_type, data in {**self.owasp_patterns, **self.cwe_patterns}.items():
            patterns = data.get('patterns', [])
            for pattern in patterns:
                if re.search(pattern, content, re.IGNORECASE):
                    findings.append({
                        'type': vuln_type,
                        'severity': data.get('severity', 'medium'),
                        'description': f'Potential {vuln_type} vulnerability detected'
                    })
        return findings

    async def enrich_findings(self, findings: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        # Add additional context from NVD database
        for finding in findings:
            if related_cve := await self.lookup_vulnerability(finding['type']):
                finding['cve_reference'] = related_cve
        return findings
