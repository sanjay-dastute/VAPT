{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/VAPT/frontend/src/components/scanners/WebScanner.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Input, Button, VStack, useToast, Text, Table, Thead, Tbody, Tr, Th, Td, Badge } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebScanner = () => {\n  _s();\n  const [targetUrl, setTargetUrl] = useState('');\n  const [scanResults, setScanResults] = useState([]);\n  const [isScanning, setIsScanning] = useState(false);\n  const toast = useToast();\n  const startScan = async () => {\n    if (!targetUrl) {\n      toast({\n        title: 'Error',\n        description: 'Please enter a target URL',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      });\n      return;\n    }\n    setIsScanning(true);\n    try {\n      const response = await fetch('http://localhost:8000/api/v1/scanners/web', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          target_url: targetUrl\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to start scan');\n      }\n      const data = await response.json();\n      toast({\n        title: 'Success',\n        description: `Scan started: Scan started for ${targetUrl}`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      });\n\n      // Get scan results\n      const statusResponse = await fetch(`http://localhost:8000/api/v1/scanners/web/${data.scan_id}`);\n      if (!statusResponse.ok) {\n        throw new Error('Failed to get scan results');\n      }\n      const statusData = await statusResponse.json();\n      setScanResults(statusData.findings);\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to start scan',\n        status: 'error',\n        duration: 3000,\n        isClosable: true\n      });\n    } finally {\n      setIsScanning(false);\n    }\n  };\n  const getSeverityColor = severity => {\n    switch (severity.toLowerCase()) {\n      case 'critical':\n        return 'red';\n      case 'high':\n        return 'orange';\n      case 'medium':\n        return 'yellow';\n      case 'low':\n        return 'green';\n      default:\n        return 'gray';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    spacing: 4,\n    align: \"stretch\",\n    p: 4,\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"2xl\",\n      children: \"Web Vulnerability Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: \"Scan web applications for security vulnerabilities using AI-powered detection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"https://example.com\",\n        value: targetUrl,\n        onChange: e => setTargetUrl(e.target.value),\n        mb: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        colorScheme: \"blue\",\n        onClick: startScan,\n        isLoading: isScanning,\n        width: \"100%\",\n        children: \"Start Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), scanResults.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      overflowX: \"auto\",\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        variant: \"simple\",\n        children: [/*#__PURE__*/_jsxDEV(Thead, {\n          children: /*#__PURE__*/_jsxDEV(Tr, {\n            children: [/*#__PURE__*/_jsxDEV(Th, {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Th, {\n              children: \"Severity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Th, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Th, {\n              children: \"Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tbody, {\n          children: scanResults.map((result, index) => /*#__PURE__*/_jsxDEV(Tr, {\n            children: [/*#__PURE__*/_jsxDEV(Td, {\n              children: result.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Td, {\n              children: /*#__PURE__*/_jsxDEV(Badge, {\n                colorScheme: getSeverityColor(result.severity),\n                children: result.severity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Td, {\n              children: result.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Td, {\n              children: result.location\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(WebScanner, \"TiVl7reZscvz8tmEiklObwMJeYg=\", false, function () {\n  return [useToast];\n});\n_c = WebScanner;\nexport default WebScanner;\nvar _c;\n$RefreshReg$(_c, \"WebScanner\");","map":{"version":3,"names":["React","useState","Box","Input","Button","VStack","useToast","Text","Table","Thead","Tbody","Tr","Th","Td","Badge","jsxDEV","_jsxDEV","WebScanner","_s","targetUrl","setTargetUrl","scanResults","setScanResults","isScanning","setIsScanning","toast","startScan","title","description","status","duration","isClosable","response","fetch","method","headers","body","JSON","stringify","target_url","ok","Error","data","json","statusResponse","scan_id","statusData","findings","error","message","getSeverityColor","severity","toLowerCase","spacing","align","p","children","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","mb","colorScheme","onClick","isLoading","width","length","overflowX","variant","map","result","index","type","location","_c","$RefreshReg$"],"sources":["/home/ubuntu/VAPT/frontend/src/components/scanners/WebScanner.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Input,\n  Button,\n  VStack,\n  useToast,\n  Text,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Badge,\n} from '@chakra-ui/react';\n\ninterface ScanResult {\n  type: string;\n  severity: string;\n  description: string;\n  location: string;\n}\n\ninterface ScanStatus {\n  id: string;\n  status: string;\n  findings: ScanResult[];\n}\n\nconst WebScanner: React.FC = () => {\n  const [targetUrl, setTargetUrl] = useState('');\n  const [scanResults, setScanResults] = useState<ScanResult[]>([]);\n  const [isScanning, setIsScanning] = useState(false);\n  const toast = useToast();\n\n  const startScan = async () => {\n    if (!targetUrl) {\n      toast({\n        title: 'Error',\n        description: 'Please enter a target URL',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    setIsScanning(true);\n    try {\n      const response = await fetch('http://localhost:8000/api/v1/scanners/web', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ target_url: targetUrl }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to start scan');\n      }\n\n      const data = await response.json();\n\n      toast({\n        title: 'Success',\n        description: `Scan started: Scan started for ${targetUrl}`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      // Get scan results\n      const statusResponse = await fetch(`http://localhost:8000/api/v1/scanners/web/${data.scan_id}`);\n      if (!statusResponse.ok) {\n        throw new Error('Failed to get scan results');\n      }\n\n      const statusData: ScanStatus = await statusResponse.json();\n      setScanResults(statusData.findings);\n\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to start scan',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n    } finally {\n      setIsScanning(false);\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity.toLowerCase()) {\n      case 'critical':\n        return 'red';\n      case 'high':\n        return 'orange';\n      case 'medium':\n        return 'yellow';\n      case 'low':\n        return 'green';\n      default:\n        return 'gray';\n    }\n  };\n\n  return (\n    <VStack spacing={4} align=\"stretch\" p={4}>\n      <Text fontSize=\"2xl\">Web Vulnerability Scanner</Text>\n      <Text>Scan web applications for security vulnerabilities using AI-powered detection</Text>\n\n      <Box>\n        <Input\n          placeholder=\"https://example.com\"\n          value={targetUrl}\n          onChange={(e) => setTargetUrl(e.target.value)}\n          mb={4}\n        />\n        <Button\n          colorScheme=\"blue\"\n          onClick={startScan}\n          isLoading={isScanning}\n          width=\"100%\"\n        >\n          Start Scan\n        </Button>\n      </Box>\n\n      {scanResults.length > 0 && (\n        <Box overflowX=\"auto\">\n          <Table variant=\"simple\">\n            <Thead>\n              <Tr>\n                <Th>Type</Th>\n                <Th>Severity</Th>\n                <Th>Description</Th>\n                <Th>Location</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {scanResults.map((result, index) => (\n                <Tr key={index}>\n                  <Td>{result.type}</Td>\n                  <Td>\n                    <Badge colorScheme={getSeverityColor(result.severity)}>\n                      {result.severity}\n                    </Badge>\n                  </Td>\n                  <Td>{result.description}</Td>\n                  <Td>{result.location}</Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        </Box>\n      )}\n    </VStack>\n  );\n};\n\nexport default WebScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}