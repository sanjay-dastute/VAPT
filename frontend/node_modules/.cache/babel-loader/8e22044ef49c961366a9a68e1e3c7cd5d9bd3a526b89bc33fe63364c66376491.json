{"ast":null,"code":"import React,{useState}from'react';import{FormControl,FormLabel,Input,Button,VStack,Select,useToast,Textarea}from'@chakra-ui/react';import ScannerLayout from'../common/ScannerLayout';import ScanProgress from'../common/ScanProgress';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BlockchainScanner=()=>{const[contractAddress,setContractAddress]=useState('');const[network,setNetwork]=useState('ethereum');const[sourceCode,setSourceCode]=useState('');const[isScanning,setIsScanning]=useState(false);const[scanProgress,setScanProgress]=useState(0);const toast=useToast();const handleScan=async()=>{if(!contractAddress&&!sourceCode){toast({title:'Error',description:'Please provide either a contract address or source code',status:'error',duration:3000});return;}setIsScanning(true);try{const response=await fetch('http://localhost:8000/scan/blockchain',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({contract_address:contractAddress,network,source_code:sourceCode})});if(!response.ok)throw new Error('Scan failed');toast({title:'Success',description:'Smart contract scan started successfully',status:'success',duration:3000});}catch(error){toast({title:'Error',description:'Failed to start smart contract scan',status:'error',duration:3000});}setIsScanning(false);};return/*#__PURE__*/_jsx(ScannerLayout,{title:\"Blockchain Security Scanner\",description:\"Analyze smart contracts for security vulnerabilities and common attack vectors\",children:/*#__PURE__*/_jsxs(VStack,{spacing:6,children:[/*#__PURE__*/_jsxs(FormControl,{children:[/*#__PURE__*/_jsx(FormLabel,{children:\"Contract Address\"}),/*#__PURE__*/_jsx(Input,{placeholder:\"0x...\",value:contractAddress,onChange:e=>setContractAddress(e.target.value)})]}),/*#__PURE__*/_jsxs(FormControl,{children:[/*#__PURE__*/_jsx(FormLabel,{children:\"Network\"}),/*#__PURE__*/_jsxs(Select,{value:network,onChange:e=>setNetwork(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"ethereum\",children:\"Ethereum Mainnet\"}),/*#__PURE__*/_jsx(\"option\",{value:\"bsc\",children:\"Binance Smart Chain\"}),/*#__PURE__*/_jsx(\"option\",{value:\"polygon\",children:\"Polygon\"})]})]}),/*#__PURE__*/_jsxs(FormControl,{children:[/*#__PURE__*/_jsx(FormLabel,{children:\"Smart Contract Source Code\"}),/*#__PURE__*/_jsx(Textarea,{placeholder:\"Paste Solidity source code here...\",value:sourceCode,onChange:e=>setSourceCode(e.target.value),minH:\"200px\"})]}),isScanning&&/*#__PURE__*/_jsx(ScanProgress,{progress:scanProgress,status:\"Scanning smart contract...\"}),/*#__PURE__*/_jsx(Button,{colorScheme:\"blue\",onClick:handleScan,isLoading:isScanning,loadingText:\"Scanning\",w:\"100%\",children:\"Start Smart Contract Scan\"})]})});};export default BlockchainScanner;","map":{"version":3,"names":["React","useState","FormControl","FormLabel","Input","Button","VStack","Select","useToast","Textarea","ScannerLayout","ScanProgress","jsx","_jsx","jsxs","_jsxs","BlockchainScanner","contractAddress","setContractAddress","network","setNetwork","sourceCode","setSourceCode","isScanning","setIsScanning","scanProgress","setScanProgress","toast","handleScan","title","description","status","duration","response","fetch","method","headers","body","JSON","stringify","contract_address","source_code","ok","Error","error","children","spacing","placeholder","value","onChange","e","target","minH","progress","colorScheme","onClick","isLoading","loadingText","w"],"sources":["/home/ubuntu/VAPT/frontend/src/components/scanners/BlockchainScanner.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  VStack,\n  Select,\n  useToast,\n  Textarea,\n  Box,\n} from '@chakra-ui/react';\nimport ScannerLayout from '../common/ScannerLayout';\nimport ScanProgress from '../common/ScanProgress';\n\nconst BlockchainScanner: React.FC = () => {\n  const [contractAddress, setContractAddress] = useState('');\n  const [network, setNetwork] = useState('ethereum');\n  const [sourceCode, setSourceCode] = useState('');\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const toast = useToast();\n\n  const handleScan = async () => {\n    if (!contractAddress && !sourceCode) {\n      toast({\n        title: 'Error',\n        description: 'Please provide either a contract address or source code',\n        status: 'error',\n        duration: 3000,\n      });\n      return;\n    }\n\n    setIsScanning(true);\n    try {\n      const response = await fetch('http://localhost:8000/scan/blockchain', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          contract_address: contractAddress,\n          network,\n          source_code: sourceCode,\n        }),\n      });\n      if (!response.ok) throw new Error('Scan failed');\n      toast({\n        title: 'Success',\n        description: 'Smart contract scan started successfully',\n        status: 'success',\n        duration: 3000,\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to start smart contract scan',\n        status: 'error',\n        duration: 3000,\n      });\n    }\n    setIsScanning(false);\n  };\n\n  return (\n    <ScannerLayout\n      title=\"Blockchain Security Scanner\"\n      description=\"Analyze smart contracts for security vulnerabilities and common attack vectors\"\n    >\n      <VStack spacing={6}>\n        <FormControl>\n          <FormLabel>Contract Address</FormLabel>\n          <Input\n            placeholder=\"0x...\"\n            value={contractAddress}\n            onChange={(e) => setContractAddress(e.target.value)}\n          />\n        </FormControl>\n        <FormControl>\n          <FormLabel>Network</FormLabel>\n          <Select value={network} onChange={(e) => setNetwork(e.target.value)}>\n            <option value=\"ethereum\">Ethereum Mainnet</option>\n            <option value=\"bsc\">Binance Smart Chain</option>\n            <option value=\"polygon\">Polygon</option>\n          </Select>\n        </FormControl>\n        <FormControl>\n          <FormLabel>Smart Contract Source Code</FormLabel>\n          <Textarea\n            placeholder=\"Paste Solidity source code here...\"\n            value={sourceCode}\n            onChange={(e) => setSourceCode(e.target.value)}\n            minH=\"200px\"\n          />\n        </FormControl>\n        {isScanning && (\n          <ScanProgress\n            progress={scanProgress}\n            status=\"Scanning smart contract...\"\n          />\n        )}\n        <Button\n          colorScheme=\"blue\"\n          onClick={handleScan}\n          isLoading={isScanning}\n          loadingText=\"Scanning\"\n          w=\"100%\"\n        >\n          Start Smart Contract Scan\n        </Button>\n      </VStack>\n    </ScannerLayout>\n  );\n};\n\nexport default BlockchainScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}