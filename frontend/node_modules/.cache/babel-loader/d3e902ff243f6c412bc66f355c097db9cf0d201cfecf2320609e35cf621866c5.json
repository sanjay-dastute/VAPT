{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/VAPT/frontend/src/components/scanners/WebScanner.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { FormControl, FormLabel, Input, Button, VStack, useToast } from '@chakra-ui/react';\nimport ScannerLayout from '../common/ScannerLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebScanner = () => {\n  _s();\n  const [target, setTarget] = useState('');\n  const [isScanning, setIsScanning] = useState(false);\n  const toast = useToast();\n  const handleScan = async () => {\n    if (!target) {\n      toast({\n        title: 'Error',\n        description: 'Please enter a target URL',\n        status: 'error',\n        duration: 3000\n      });\n      return;\n    }\n    setIsScanning(true);\n    try {\n      const response = await fetch('http://localhost:8000/scan/web', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          target\n        })\n      });\n      if (!response.ok) throw new Error('Scan failed');\n      toast({\n        title: 'Success',\n        description: 'Scan started successfully',\n        status: 'success',\n        duration: 3000\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to start scan',\n        status: 'error',\n        duration: 3000\n      });\n    }\n    setIsScanning(false);\n  };\n  return /*#__PURE__*/_jsxDEV(ScannerLayout, {\n    title: \"Web Vulnerability Scanner\",\n    description: \"Scan web applications for security vulnerabilities using AI-powered detection\",\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 6,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"Target URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"https://example.com\",\n          value: target,\n          onChange: e => setTarget(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        colorScheme: \"blue\",\n        onClick: handleScan,\n        isLoading: isScanning,\n        loadingText: \"Scanning\",\n        w: \"100%\",\n        children: \"Start Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(WebScanner, \"LTKoHTQKrYAWznlxHkCkNpSaX4U=\", false, function () {\n  return [useToast];\n});\n_c = WebScanner;\nexport default WebScanner;\nvar _c;\n$RefreshReg$(_c, \"WebScanner\");","map":{"version":3,"names":["React","useState","FormControl","FormLabel","Input","Button","VStack","useToast","ScannerLayout","jsxDEV","_jsxDEV","WebScanner","_s","target","setTarget","isScanning","setIsScanning","toast","handleScan","title","description","status","duration","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","children","spacing","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","colorScheme","onClick","isLoading","loadingText","w","_c","$RefreshReg$"],"sources":["/home/ubuntu/VAPT/frontend/src/components/scanners/WebScanner.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  VStack,\n  HStack,\n  Checkbox,\n  useToast,\n  Progress,\n  Text,\n} from '@chakra-ui/react';\nimport ScannerLayout from '../common/ScannerLayout';\n\nconst WebScanner: React.FC = () => {\n  const [target, setTarget] = useState('');\n  const [isScanning, setIsScanning] = useState(false);\n  const toast = useToast();\n\n  const handleScan = async () => {\n    if (!target) {\n      toast({\n        title: 'Error',\n        description: 'Please enter a target URL',\n        status: 'error',\n        duration: 3000,\n      });\n      return;\n    }\n\n    setIsScanning(true);\n    try {\n      const response = await fetch('http://localhost:8000/scan/web', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ target }),\n      });\n      if (!response.ok) throw new Error('Scan failed');\n      toast({\n        title: 'Success',\n        description: 'Scan started successfully',\n        status: 'success',\n        duration: 3000,\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to start scan',\n        status: 'error',\n        duration: 3000,\n      });\n    }\n    setIsScanning(false);\n  };\n\n  return (\n    <ScannerLayout\n      title=\"Web Vulnerability Scanner\"\n      description=\"Scan web applications for security vulnerabilities using AI-powered detection\"\n    >\n      <VStack spacing={6}>\n        <FormControl>\n          <FormLabel>Target URL</FormLabel>\n          <Input\n            placeholder=\"https://example.com\"\n            value={target}\n            onChange={(e) => setTarget(e.target.value)}\n          />\n        </FormControl>\n        <Button\n          colorScheme=\"blue\"\n          onClick={handleScan}\n          isLoading={isScanning}\n          loadingText=\"Scanning\"\n          w=\"100%\"\n        >\n          Start Scan\n        </Button>\n      </VStack>\n    </ScannerLayout>\n  );\n};\n\nexport default WebScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}