{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/VAPT/frontend/src/components/scanners/BlockchainScanner.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { FormControl, FormLabel, Input, Button, VStack, Select, useToast, Textarea } from '@chakra-ui/react';\nimport ScannerLayout from '../common/ScannerLayout';\nimport ScanProgress from '../common/ScanProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlockchainScanner = () => {\n  _s();\n  const [contractAddress, setContractAddress] = useState('');\n  const [network, setNetwork] = useState('ethereum');\n  const [sourceCode, setSourceCode] = useState('');\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const toast = useToast();\n  const handleScan = async () => {\n    if (!contractAddress && !sourceCode) {\n      toast({\n        title: 'Error',\n        description: 'Please provide either a contract address or source code',\n        status: 'error',\n        duration: 3000\n      });\n      return;\n    }\n    setIsScanning(true);\n    try {\n      const response = await fetch('http://localhost:8000/scan/blockchain', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          contract_address: contractAddress,\n          network,\n          source_code: sourceCode\n        })\n      });\n      if (!response.ok) throw new Error('Scan failed');\n      toast({\n        title: 'Success',\n        description: 'Smart contract scan started successfully',\n        status: 'success',\n        duration: 3000\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to start smart contract scan',\n        status: 'error',\n        duration: 3000\n      });\n    }\n    setIsScanning(false);\n  };\n  return /*#__PURE__*/_jsxDEV(ScannerLayout, {\n    title: \"Blockchain Security Scanner\",\n    description: \"Analyze smart contracts for security vulnerabilities and common attack vectors\",\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 6,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"Contract Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"0x...\",\n          value: contractAddress,\n          onChange: e => setContractAddress(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"Network\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: network,\n          onChange: e => setNetwork(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ethereum\",\n            children: \"Ethereum Mainnet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"bsc\",\n            children: \"Binance Smart Chain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"polygon\",\n            children: \"Polygon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"Smart Contract Source Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n          placeholder: \"Paste Solidity source code here...\",\n          value: sourceCode,\n          onChange: e => setSourceCode(e.target.value),\n          minH: \"200px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), isScanning && /*#__PURE__*/_jsxDEV(ScanProgress, {\n        progress: scanProgress,\n        status: \"Scanning smart contract...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        colorScheme: \"blue\",\n        onClick: handleScan,\n        isLoading: isScanning,\n        loadingText: \"Scanning\",\n        w: \"100%\",\n        children: \"Start Smart Contract Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(BlockchainScanner, \"u0/iV+VoC8Jtk4c98AyoVeIsrn8=\", false, function () {\n  return [useToast];\n});\n_c = BlockchainScanner;\nexport default BlockchainScanner;\nvar _c;\n$RefreshReg$(_c, \"BlockchainScanner\");","map":{"version":3,"names":["React","useState","FormControl","FormLabel","Input","Button","VStack","Select","useToast","Textarea","ScannerLayout","ScanProgress","jsxDEV","_jsxDEV","BlockchainScanner","_s","contractAddress","setContractAddress","network","setNetwork","sourceCode","setSourceCode","isScanning","setIsScanning","scanProgress","setScanProgress","toast","handleScan","title","description","status","duration","response","fetch","method","headers","body","JSON","stringify","contract_address","source_code","ok","Error","error","children","spacing","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","minH","progress","colorScheme","onClick","isLoading","loadingText","w","_c","$RefreshReg$"],"sources":["/home/ubuntu/VAPT/frontend/src/components/scanners/BlockchainScanner.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  VStack,\n  Select,\n  useToast,\n  Textarea,\n  Box,\n} from '@chakra-ui/react';\nimport ScannerLayout from '../common/ScannerLayout';\nimport ScanProgress from '../common/ScanProgress';\n\nconst BlockchainScanner: React.FC = () => {\n  const [contractAddress, setContractAddress] = useState('');\n  const [network, setNetwork] = useState('ethereum');\n  const [sourceCode, setSourceCode] = useState('');\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const toast = useToast();\n\n  const handleScan = async () => {\n    if (!contractAddress && !sourceCode) {\n      toast({\n        title: 'Error',\n        description: 'Please provide either a contract address or source code',\n        status: 'error',\n        duration: 3000,\n      });\n      return;\n    }\n\n    setIsScanning(true);\n    try {\n      const response = await fetch('http://localhost:8000/scan/blockchain', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          contract_address: contractAddress,\n          network,\n          source_code: sourceCode,\n        }),\n      });\n      if (!response.ok) throw new Error('Scan failed');\n      toast({\n        title: 'Success',\n        description: 'Smart contract scan started successfully',\n        status: 'success',\n        duration: 3000,\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to start smart contract scan',\n        status: 'error',\n        duration: 3000,\n      });\n    }\n    setIsScanning(false);\n  };\n\n  return (\n    <ScannerLayout\n      title=\"Blockchain Security Scanner\"\n      description=\"Analyze smart contracts for security vulnerabilities and common attack vectors\"\n    >\n      <VStack spacing={6}>\n        <FormControl>\n          <FormLabel>Contract Address</FormLabel>\n          <Input\n            placeholder=\"0x...\"\n            value={contractAddress}\n            onChange={(e) => setContractAddress(e.target.value)}\n          />\n        </FormControl>\n        <FormControl>\n          <FormLabel>Network</FormLabel>\n          <Select value={network} onChange={(e) => setNetwork(e.target.value)}>\n            <option value=\"ethereum\">Ethereum Mainnet</option>\n            <option value=\"bsc\">Binance Smart Chain</option>\n            <option value=\"polygon\">Polygon</option>\n          </Select>\n        </FormControl>\n        <FormControl>\n          <FormLabel>Smart Contract Source Code</FormLabel>\n          <Textarea\n            placeholder=\"Paste Solidity source code here...\"\n            value={sourceCode}\n            onChange={(e) => setSourceCode(e.target.value)}\n            minH=\"200px\"\n          />\n        </FormControl>\n        {isScanning && (\n          <ScanProgress\n            progress={scanProgress}\n            status=\"Scanning smart contract...\"\n          />\n        )}\n        <Button\n          colorScheme=\"blue\"\n          onClick={handleScan}\n          isLoading={isScanning}\n          loadingText=\"Scanning\"\n          w=\"100%\"\n        >\n          Start Smart Contract Scan\n        </Button>\n      </VStack>\n    </ScannerLayout>\n  );\n};\n\nexport default BlockchainScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}