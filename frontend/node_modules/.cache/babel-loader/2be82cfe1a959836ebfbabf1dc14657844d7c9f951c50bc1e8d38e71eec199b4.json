{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000/api/v1';\nexport const startWebScan = async targetUrl => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/scanners/web`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        target_url: targetUrl\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error starting web scan:', error);\n    throw error;\n  }\n};\nexport const getScanStatus = async scanId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/scanners/web/${scanId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error getting scan status:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","startWebScan","targetUrl","response","fetch","method","headers","body","JSON","stringify","target_url","ok","Error","status","json","error","console","getScanStatus","scanId"],"sources":["/home/ubuntu/VAPT/frontend/src/api/scanners.ts"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api/v1';\n\nexport const startWebScan = async (targetUrl: string) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/scanners/web`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ target_url: targetUrl }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error starting web scan:', error);\n    throw error;\n  }\n};\n\nexport const getScanStatus = async (scanId: string) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/scanners/web/${scanId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error getting scan status:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,8BAA8B;AAEnD,OAAO,MAAMC,YAAY,GAAG,MAAOC,SAAiB,IAAK;EACvD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,eAAe,EAAE;MAC3DK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,UAAU,EAAER;MAAU,CAAC;IAChD,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;IAC3D;IAEA,OAAO,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAOC,MAAc,IAAK;EACrD,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,iBAAiBkB,MAAM,EAAE,CAAC;IACtE,IAAI,CAACf,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;IAC3D;IACA,OAAO,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}