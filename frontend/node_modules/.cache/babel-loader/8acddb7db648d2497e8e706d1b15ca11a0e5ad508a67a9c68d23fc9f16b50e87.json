{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/VAPT/frontend/src/components/Scanner.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Button, FormControl, FormLabel, Input, Select, VStack, Container, Heading, useToast } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Scanner = () => {\n  _s();\n  const [scanType, setScanType] = React.useState('web');\n  const [target, setTarget] = React.useState('');\n  const [isScanning, setIsScanning] = React.useState(false);\n  const toast = useToast();\n  const handleScan = async () => {\n    setIsScanning(true);\n    try {\n      const response = await fetch(`http://localhost:8000/scan/${scanType}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          target\n        })\n      });\n      if (!response.ok) throw new Error('Scan failed');\n      const result = await response.json();\n      toast({\n        title: 'Scan Complete',\n        description: `Found ${result.results.vulnerabilities.length} vulnerabilities`,\n        status: 'success',\n        duration: 5000,\n        isClosable: true\n      });\n    } catch (error) {\n      toast({\n        title: 'Scan Failed',\n        description: (error === null || error === void 0 ? void 0 : error.message) || 'An unknown error occurred',\n        status: 'error',\n        duration: 5000,\n        isClosable: true\n      });\n    } finally {\n      setIsScanning(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxW: \"container.md\",\n    py: 10,\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 6,\n      align: \"stretch\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        size: \"lg\",\n        children: \"VAPT Scanner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"Scan Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: scanType,\n          onChange: e => setScanType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"web\",\n            children: \"Web Application\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mobile\",\n            children: \"Mobile Application\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"api\",\n            children: \"API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"source_code\",\n            children: \"Source Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"blockchain\",\n            children: \"Blockchain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          children: \"Target\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Enter target URL or path\",\n          value: target,\n          onChange: e => setTarget(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        colorScheme: \"blue\",\n        isLoading: isScanning,\n        loadingText: \"Scanning...\",\n        onClick: handleScan,\n        children: \"Start Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Scanner, \"+Kj2K6QdN6e4MVsnnwigOkoX0YU=\", false, function () {\n  return [useToast];\n});\n_c = Scanner;\nexport default Scanner;\nvar _c;\n$RefreshReg$(_c, \"Scanner\");","map":{"version":3,"names":["React","Button","FormControl","FormLabel","Input","Select","VStack","Container","Heading","useToast","jsxDEV","_jsxDEV","Scanner","_s","scanType","setScanType","useState","target","setTarget","isScanning","setIsScanning","toast","handleScan","response","fetch","method","headers","body","JSON","stringify","ok","Error","result","json","title","description","results","vulnerabilities","length","status","duration","isClosable","error","message","maxW","py","children","spacing","align","size","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","placeholder","colorScheme","isLoading","loadingText","onClick","_c","$RefreshReg$"],"sources":["/home/ubuntu/VAPT/frontend/src/components/Scanner.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  VStack,\n  Container,\n  Heading,\n  useToast,\n} from '@chakra-ui/react';\n\nconst Scanner: React.FC = () => {\n  const [scanType, setScanType] = React.useState('web');\n  const [target, setTarget] = React.useState('');\n  const [isScanning, setIsScanning] = React.useState(false);\n  const toast = useToast();\n\n  const handleScan = async () => {\n    setIsScanning(true);\n    try {\n      const response = await fetch(`http://localhost:8000/scan/${scanType}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ target }),\n      });\n\n      if (!response.ok) throw new Error('Scan failed');\n\n      const result = await response.json();\n      toast({\n        title: 'Scan Complete',\n        description: `Found ${result.results.vulnerabilities.length} vulnerabilities`,\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n    } catch (error: any) {\n      toast({\n        title: 'Scan Failed',\n        description: error?.message || 'An unknown error occurred',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setIsScanning(false);\n    }\n  };\n\n  return (\n    <Container maxW=\"container.md\" py={10}>\n      <VStack spacing={6} align=\"stretch\">\n        <Heading size=\"lg\">VAPT Scanner</Heading>\n        <FormControl>\n          <FormLabel>Scan Type</FormLabel>\n          <Select value={scanType} onChange={(e) => setScanType(e.target.value)}>\n            <option value=\"web\">Web Application</option>\n            <option value=\"mobile\">Mobile Application</option>\n            <option value=\"api\">API</option>\n            <option value=\"source_code\">Source Code</option>\n            <option value=\"blockchain\">Blockchain</option>\n          </Select>\n        </FormControl>\n        <FormControl>\n          <FormLabel>Target</FormLabel>\n          <Input\n            placeholder=\"Enter target URL or path\"\n            value={target}\n            onChange={(e) => setTarget(e.target.value)}\n          />\n        </FormControl>\n        <Button\n          colorScheme=\"blue\"\n          isLoading={isScanning}\n          loadingText=\"Scanning...\"\n          onClick={handleScan}\n        >\n          Start Scan\n        </Button>\n      </VStack>\n    </Container>\n  );\n};\n\nexport default Scanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}